name: docker-image

on:
  push:
    branches: ["main"]

jobs:
  build-and-run:
    runs-on: self-hosted
    steps:
      # Step 1: Checkout code
      - uses: actions/checkout@v5

      # Step 2: Setup Docker Buildx
      - uses: docker/setup-buildx-action@v3

      # Step 3: Login to DockerHub
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 4: Build and push Docker image
      - uses: docker/build-push-action@v6
        with:
          context: ./exchek-ui-dev-development/
          file: ./exchek-ui-dev-development/
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.sha }}

      # Step 5: Stop old container (if exists)
      - name: Stop old container
        run: |
          if (docker ps -q -f name=myapp-container) {
              docker stop myapp-container
          }
          if (docker ps -aq -f name=myapp-container) {
              docker rm myapp-container
          }

      # Step 6: Run the new container (8080 in container â†’ 8082 on host)
      - name: Run Docker container
        run: |
          docker run -d -p 8082:8000 --name myapp-container `
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest

      # Step 7: List running containers
      - name: List running containers
        run: docker ps -a

      # Step 8: Test the container via curl
      - name: Test running container
        run: |
          try {
              Invoke-WebRequest http://localhost:8082 -UseBasicParsing
          } catch {
              Write-Host "Container is not responding!"
              exit 1
          }
